SELECT kt.kind AS movie_kind, AVG(aka.production_year) AS average_production_year, COUNT(ci.person_id) AS total_cast_count, SUM(CASE WHEN ci.role_id = 1 THEN 1 ELSE 0 END) AS actor_count, SUM(CASE WHEN ci.role_id = 2 THEN 1 ELSE 0 END) AS actress_count FROM aka_title AS aka JOIN kind_type AS kt ON aka.kind_id = kt.id JOIN cast_info AS ci ON aka.movie_id = ci.movie_id JOIN movie_info AS mi ON aka.movie_id = mi.movie_id JOIN person_info AS pi ON ci.person_id = pi.person_id WHERE aka.title LIKE '%The Hobbits%' OR aka.id IN (34831, 39506, 43821, 20330) OR mi.movie_id IN (18783, 19260, 8743, 8393) GROUP BY kt.kind ORDER BY average_production_year DESC;
SELECT it.info AS info_category, COUNT(*) AS total_entries, COUNT(DISTINCT mc.movie_id) AS distinct_movies_involved, COUNT(DISTINCT mc.company_id) AS distinct_companies_involved FROM movie_info mi JOIN info_type it ON mi.info_type_id = it.id JOIN movie_companies mc ON mi.movie_id = mc.movie_id WHERE it.info IN ('crazy credits', 'locations', 'mpaa', 'LD group genre', 'LD number of chapter stops') GROUP BY it.info ORDER BY total_entries DESC;
SELECT n.name AS actor_name, COUNT(DISTINCT ci.movie_id) AS number_of_movies, AVG(t.production_year) AS average_production_year, SUM(CASE WHEN lt.id = 3 THEN 1 ELSE 0 END) AS count_of_sequels, SUM(CASE WHEN lt.id = 4 THEN 1 ELSE 0 END) AS count_of_prequels FROM cast_info ci JOIN name n ON ci.person_id = n.id JOIN title t ON ci.movie_id = t.id LEFT JOIN movie_link ml ON t.id = ml.movie_id LEFT JOIN link_type lt ON ml.link_type_id = lt.id WHERE n.gender = 'F' AND t.kind_id IN (2, 7) AND t.production_year BETWEEN 1990 AND 2000 GROUP BY n.name HAVING COUNT(DISTINCT ci.movie_id) > 5 ORDER BY number_of_movies DESC, average_production_year DESC;
SELECT AVG(CAST(mi_idx.info AS decimal)) AS average_rating, COUNT(DISTINCT ci.movie_id) AS number_of_movies, COUNT(DISTINCT ci.person_id) AS number_of_actors, SUM(CASE WHEN mc.company_type_id = 2 THEN 1 ELSE 0 END) AS number_of_distributors, n.gender, ki.keyword FROM cast_info AS ci JOIN movie_info_idx AS mi_idx ON ci.movie_id = mi_idx.movie_id JOIN movie_companies AS mc ON ci.movie_id = mc.movie_id JOIN name AS n ON ci.person_id = n.id JOIN keyword AS ki ON mi_idx.info_type_id = ki.id WHERE ci.role_id = 1 AND n.gender IS NOT NULL AND mi_idx.info_type_id = (SELECT id FROM info_type WHERE info = 'rating') AND mc.company_type_id = (SELECT id FROM company_type WHERE kind = 'distributor') GROUP BY n.gender, ki.keyword HAVING COUNT(DISTINCT ci.movie_id) > 10 ORDER BY average_rating DESC, number_of_movies DESC;
SELECT ct.kind AS company_type, cn.country_code, COUNT(DISTINCT t.id) AS total_movies, AVG(t.imdb_id) AS average_imdb_id FROM title AS t JOIN movie_link AS ml ON t.id = ml.movie_id JOIN company_name AS cn ON cn.imdb_id = ml.linked_movie_id JOIN company_type AS ct ON cn.id = ct.id WHERE t.production_year BETWEEN 2010 AND 2020 AND cn.country_code IN ('US', 'GB', 'CA') GROUP BY ct.kind, cn.country_code ORDER BY total_movies DESC, average_imdb_id ASC;
SELECT AVG(ak.production_year) AS average_production_year, COUNT(DISTINCT cn.id) AS number_of_companies, COUNT(DISTINCT mk.movie_id) AS number_of_movies_with_keywords, SUM(CASE WHEN cc.subject_id = 1 THEN 1 ELSE 0 END) AS total_movies_with_complete_cast, MAX(pi.note) AS most_recent_person_note FROM aka_title ak JOIN movie_info mi ON ak.movie_id = mi.movie_id JOIN movie_keyword mk ON ak.movie_id = mk.movie_id JOIN company_name cn ON cn.country_code NOT IN ('[pl]') LEFT JOIN complete_cast cc ON ak.movie_id = cc.movie_id LEFT JOIN person_info pi ON pi.info_type_id = mi.info_type_id WHERE mi.info_type_id = '4' AND (pi.note IN ('Be Free Films', 'Autor', 'Fan Club President', 'Nick van de Wall', 'hwatson4964@excite.com', 'Anon.') OR pi.note IS NULL) AND ak.title IN ('DR-Dokumentar: 28. maj', 'I Want to Rob Jeff Goldblum') GROUP BY ak.kind_id ORDER BY average_production_year DESC;
SELECT kt.kind, COUNT(DISTINCT mc.movie_id) AS number_of_movies, COUNT(DISTINCT mk.keyword_id) AS number_of_keywords, AVG(n.imdb_id) AS average_imdb_id, SUM(CASE WHEN n.gender = 'M' THEN 1 ELSE 0 END) AS number_of_male_contributors, SUM(CASE WHEN n.gender = 'F' THEN 1 ELSE 0 END) AS number_of_female_contributors FROM movie_companies AS mc JOIN kind_type AS kt ON mc.company_type_id = kt.id JOIN movie_keyword AS mk ON mc.movie_id = mk.movie_id JOIN name AS n ON mc.company_id = n.id GROUP BY kt.kind HAVING COUNT(DISTINCT mc.movie_id) > 5 ORDER BY number_of_movies DESC;
SELECT AVG(at.production_year) AS average_production_year, COUNT(DISTINCT comp.id) AS number_of_companies, SUM(CASE WHEN cc.status_id = 4 THEN 1 ELSE 0 END) AS full_cast_movies, COUNT(DISTINCT mk.id) AS number_of_keywords, MAX(pi.id) AS max_person_info_id FROM aka_title AS at JOIN movie_companies AS mc ON mc.movie_id = at.movie_id JOIN company_name AS comp ON mc.company_id = comp.id JOIN complete_cast AS cc ON at.movie_id = cc.movie_id JOIN movie_keyword AS mk ON at.movie_id = mk.movie_id LEFT JOIN person_info AS pi ON pi.person_id = at.movie_id WHERE at.kind_id = 1 AND mc.company_type_id IN (1, 2) AND cc.status_id IN (3, 4) AND at.production_year BETWEEN 1990 AND 2000 GROUP BY at.production_year ORDER BY average_production_year DESC;
SELECT COUNT(DISTINCT at.id) AS total_alternative_titles, AVG(cc.status_id) AS average_status_id, SUM(CASE WHEN at.production_year > 2000 THEN 1 ELSE 0 END) AS titles_after_2000, cn.name AS character_name, it.info AS info_type_description, MAX(at.season_nr) AS max_season_nr, MIN(at.episode_nr) AS min_episode_nr FROM aka_title at JOIN complete_cast cc ON at.movie_id = cc.movie_id JOIN char_name cn ON cn.id = at.id JOIN info_type it ON it.id = cc.subject_id GROUP BY cn.name, it.info ORDER BY total_alternative_titles DESC, average_status_id;
SELECT kt.kind AS movie_kind, AVG(CAST(mi.info AS numeric)) AS average_rating, COUNT(DISTINCT mk.keyword_id) AS unique_keywords_count, COUNT(DISTINCT t.id) AS total_movies, SUM(CASE WHEN t.production_year > 2000 THEN 1 ELSE 0 END) AS movies_after_2000 FROM title AS t INNER JOIN kind_type AS kt ON t.kind_id = kt.id LEFT JOIN movie_info AS mi ON t.id = mi.movie_id AND mi.info_type_id = (SELECT id FROM movie_info_idx WHERE info = 'rating') LEFT JOIN movie_keyword AS mk ON t.id = mk.movie_id WHERE t.production_year BETWEEN 1990 AND 2010 GROUP BY kt.kind HAVING COUNT(DISTINCT t.id) > 10 ORDER BY average_rating DESC;
SELECT ct.kind AS company_type, COUNT(DISTINCT cn.id) AS num_companies, COUNT(DISTINCT ci.person_id) AS num_people, AVG(ci.nr_order) AS average_cast_order, SUM(CASE WHEN mk.keyword_id = '5000' THEN 1 ELSE 0 END) AS count_keyword_5000, SUM(CASE WHEN mk.keyword_id = '7107' THEN 1 ELSE 0 END) AS count_keyword_7107, COUNT(DISTINCT mk.movie_id) AS num_movies_with_keywords FROM company_name AS cn JOIN company_type AS ct ON cn.id = ct.id LEFT JOIN movie_keyword AS mk ON cn.id = mk.movie_id LEFT JOIN cast_info AS ci ON ci.movie_id = mk.movie_id WHERE cn.country_code IS NOT NULL AND ci.note NOT LIKE '%(segment "%' AND ci.note NOT LIKE '%(1998)%' GROUP BY ct.kind ORDER BY num_companies DESC, num_people DESC;
SELECT COUNT(DISTINCT n.id) AS total_actors, AVG(t.production_year) AS average_production_year, SUM(CASE WHEN rt.role = 'actor' THEN 1 ELSE 0 END) AS total_actor_roles, SUM(CASE WHEN rt.role = 'composer' THEN 1 ELSE 0 END) AS total_composer_roles FROM name n JOIN aka_name ak ON n.id = ak.person_id JOIN role_type rt ON ak.id = rt.id JOIN title t ON ak.id = t.id JOIN movie_info_idx mi_idx ON t.id = mi_idx.movie_id JOIN movie_link ml ON t.id = ml.movie_id JOIN keyword k ON mi_idx.id = k.id JOIN company_type ct ON ml.id = ct.id WHERE t.production_year BETWEEN 1990 AND 2020 AND k.phonetic_code IN ('W2365', 'G5235', 'D26') AND ct.kind IN ('distributors', 'miscellaneous companies') AND mi_idx.info LIKE '%...0..0223%' GROUP BY t.kind_id;
SELECT rt.ROLE, COUNT(ci.id) AS total_roles, AVG(ci.nr_order) AS average_order, MIN(ci.nr_order) AS min_order, MAX(ci.nr_order) AS max_order, COUNT(DISTINCT ci.person_id) AS unique_actors FROM cast_info ci JOIN role_type rt ON ci.role_id = rt.id JOIN person_info pi ON ci.person_id = pi.person_id WHERE ci.person_role_id IS NOT NULL AND pi.info_type_id = 3 GROUP BY rt.ROLE ORDER BY total_roles DESC;
