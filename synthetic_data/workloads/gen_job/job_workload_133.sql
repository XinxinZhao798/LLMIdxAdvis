SELECT ct.kind AS cast_type, AVG(mi_idx.info::NUMERIC) AS average_rating, COUNT(DISTINCT cc.movie_id) AS total_movies, COUNT(DISTINCT lt.id) AS link_types_count, SUM(CASE WHEN rt.id IN (10, 5, 3, 8, 11, 6) THEN 1 ELSE 0 END) AS specific_role_count FROM complete_cast cc JOIN comp_cast_type ct ON cc.subject_id = ct.id JOIN movie_info_idx mi_idx ON cc.movie_id = mi_idx.movie_id AND mi_idx.info_type_id = 4 JOIN link_type lt ON lt.id IN (3, 8, 10) AND lt.link = 'features' JOIN role_type rt ON rt.id IN (10, 5, 3, 8, 11, 6) JOIN movie_info mi ON mi.movie_id = cc.movie_id WHERE cc.movie_id IN (1642852, 1666892) AND cc.status_id = 1 GROUP BY ct.kind;
SELECT ct.kind AS company_type, AVG(kw.id) AS average_keyword_id, COUNT(DISTINCT mc.movie_id) AS total_movies, SUM(mc.company_id) AS sum_company_id FROM movie_companies mc JOIN company_type ct ON mc.company_type_id = ct.id JOIN movie_link ml ON mc.movie_id = ml.movie_id JOIN keyword kw ON CAST(ml.link_type_id AS INTEGER) = kw.id JOIN name n ON mc.movie_id = n.id WHERE n.gender = 'm' AND kw.keyword IN ('Black Rick', 'Joel Gonzalez', 'TNI Soldier', 'ESPN', 'Newsroom Martian') GROUP BY ct.kind ORDER BY total_movies DESC, average_keyword_id;
SELECT AT.production_year, COUNT(DISTINCT AT.movie_id) AS total_movies, COUNT(DISTINCT ML.movie_id) AS total_linked_movies, AVG(CASE WHEN N.gender = 'F' THEN 1 ELSE 0 END) AS avg_female_actors, SUM(CASE WHEN MI_IDX.info_type_id = 1 THEN 1 ELSE 0 END) AS total_genre_info FROM aka_title AT JOIN movie_link ML ON AT.movie_id = ML.movie_id JOIN movie_info_idx MI_IDX ON AT.movie_id = MI_IDX.movie_id JOIN name N ON N.id = MI_IDX.movie_id WHERE AT.production_year BETWEEN 1960 AND 1970 AND ML.link_type_id IN (1, 2, 10, 13) AND N.gender IN ('F', 'M') GROUP BY AT.production_year ORDER BY AT.production_year;
SELECT AVG(mi_idx.info::numeric) AS average_rating, COUNT(DISTINCT mc.movie_id) AS total_movies, COUNT(DISTINCT pi.person_id) AS total_persons_involved, SUM(CASE WHEN pi.note LIKE '%Self%' THEN 1 ELSE 0 END) AS count_of_self_mentions FROM movie_companies AS mc JOIN person_info AS pi ON mc.movie_id = pi.person_id JOIN role_type AS rt ON pi.info_type_id = rt.id JOIN movie_info_idx AS mi_idx ON mc.movie_id = mi_idx.movie_id WHERE mc.note LIKE '%(TV)%' AND pi.note NOT IN ('Nati Adler', 'Anoymous') AND rt.ROLE NOT LIKE '%actor%' GROUP BY mc.company_type_id;
SELECT rt.ROLE, COUNT(DISTINCT ci.person_id) AS number_of_persons, AVG(ci.nr_order) AS average_order, SUM(mc.company_id) AS total_companies_involved, COUNT(DISTINCT mi.movie_id) AS number_of_movies_with_info FROM cast_info ci JOIN role_type rt ON ci.role_id = rt.id JOIN movie_companies mc ON ci.movie_id = mc.movie_id AND mc.company_type_id = 1 JOIN movie_info_idx mi ON ci.movie_id = mi.movie_id JOIN complete_cast cc ON ci.movie_id = cc.movie_id AND cc.subject_id = 1 WHERE ci.person_id IN (3767, 4155) AND ci.person_role_id IS NOT NULL AND mi.info LIKE '..00011111%' AND mi.info_type_id IN (15, 28, 24) GROUP BY rt.ROLE;
SELECT AVG(mc_count.count_movies) AS average_movies_per_company, SUM(mc_count.budget_movies) AS total_budget_movies, COUNT(DISTINCT mc.movie_id) AS total_movies, COUNT(DISTINCT mc.company_id) AS total_companies, COUNT(DISTINCT rt.id) AS total_roles FROM (SELECT mc.company_id, COUNT(mc.movie_id) AS count_movies, SUM(CASE WHEN ct.kind = 'Budget' THEN 1 ELSE 0 END) AS budget_movies FROM movie_companies AS mc JOIN comp_cast_type AS ct ON mc.company_type_id = ct.id GROUP BY mc.company_id ) AS mc_count JOIN movie_companies AS mc ON mc_count.company_id = mc.company_id JOIN role_type AS rt ON rt.id IN ('10', '3', '11', '5') GROUP BY rt.id;
SELECT it.info AS info_category, COUNT(DISTINCT cc.movie_id) AS number_of_movies, COUNT(DISTINCT cc.id) AS total_complete_cast_records, COUNT(DISTINCT mi_idx.movie_id) AS movies_with_additional_info, AVG(CAST(mi_idx.info AS INTEGER)) FILTER (WHERE it.info = 'votes') AS average_votes, SUM(CAST(mi_idx.info AS INTEGER)) FILTER (WHERE it.info = 'votes') AS total_votes, MIN(CAST(mi_idx.info AS INTEGER)) FILTER (WHERE it.info = 'votes') AS min_votes, MAX(CAST(mi_idx.info AS INTEGER)) FILTER (WHERE it.info = 'votes') AS max_votes, COUNT(DISTINCT lt.id) AS number_of_link_types, STRING_AGG(DISTINCT lt.link, ', ') AS link_types_used FROM complete_cast cc JOIN movie_info_idx mi_idx ON cc.movie_id = mi_idx.movie_id JOIN info_type it ON mi_idx.info_type_id = it.id JOIN link_type lt ON lt.id = mi_idx.info_type_id WHERE cc.status_id <> 0 AND it.info IN ('height', 'tech info', 'votes', 'mini biography') AND lt.link IN ('remake of', 'remade as', 'featured in', 'spin off') GROUP BY it.info;
SELECT rt.role AS role_type, COUNT(*) AS num_roles, AVG(cast(mi_idx.info AS double precision)) AS average_rating, SUM(cast(mi.info AS integer)) AS total_award_count FROM role_type AS rt JOIN char_name AS cn ON cn.id = rt.id JOIN movie_info_idx AS mi_idx ON cn.id = mi_idx.movie_id JOIN movie_info AS mi ON cn.id = mi.movie_id WHERE mi_idx.info_type_id = (SELECT id FROM info_type WHERE info = 'rating') AND mi.info_type_id = (SELECT id FROM info_type WHERE info = 'awards') AND rt.role IN ('actor', 'actress', 'producer', 'director') GROUP BY rt.role ORDER BY num_roles DESC, average_rating DESC;
SELECT n.name AS actor_name, COUNT(DISTINCT ci.movie_id) AS number_of_movies, COUNT(ci.id) AS total_roles_played, AVG(ci.nr_order) AS average_order_of_appearance, AVG(CAST(mi_idx.info AS FLOAT)) AS average_movie_rating FROM cast_info ci JOIN name n ON ci.person_id = n.id JOIN movie_info_idx mi_idx ON ci.movie_id = mi_idx.movie_id AND mi_idx.info_type_id = (SELECT id FROM info_type WHERE info = 'rating') GROUP BY n.name ORDER BY number_of_movies DESC, average_movie_rating DESC, average_order_of_appearance ASC LIMIT 10;
SELECT ct.kind AS company_type, AVG(ak.production_year) AS average_production_year, COUNT(DISTINCT ak.movie_id) AS number_of_movies, COUNT(DISTINCT cc.subject_id) AS number_of_subjects, SUM(CASE WHEN n.gender = 'm' THEN 1 ELSE 0 END) AS male_actor_count, SUM(CASE WHEN n.gender = 'f' THEN 1 ELSE 0 END) AS female_actor_count, COUNT(DISTINCT k.id) AS number_of_unique_keywords FROM aka_title ak JOIN complete_cast cc ON ak.movie_id = cc.movie_id JOIN company_type ct ON ak.kind_id = ct.id JOIN keyword k ON ak.id = k.id JOIN name n ON ak.id = n.id WHERE ak.production_year BETWEEN 2000 AND 2010 AND n.md5sum IN ('660ea0ef9bdefafcda003d019848f703', '6d0c221bb93b310ab2904bdd75c8a442', 'a24f9431335b1461f14ac1933840f6cf', 'afaebb48a6577994f1924c5910d75467', 'e755250c050a467046983653e209cf90', '3978c1bc47a6deab5ab0956b3cb08ada') GROUP BY ct.kind;
SELECT cct.kind AS cast_type, AVG(t.production_year) AS average_production_year, COUNT(DISTINCT k.id) AS unique_keywords_count, SUM(CASE WHEN t.kind_id = cct.id AND cct.kind = 'complete+verified' THEN 1 ELSE 0 END) AS total_complete_verified_titles, COUNT(*) AS total_titles FROM title t LEFT JOIN comp_cast_type cct ON t.kind_id = cct.id LEFT JOIN keyword k ON k.phonetic_code = t.phonetic_code GROUP BY cct.kind ORDER BY total_complete_verified_titles DESC;
SELECT rt.ROLE, COUNT(ci.id) AS total_roles, AVG(ci.nr_order) AS average_order, MIN(ci.nr_order) AS min_order, MAX(ci.nr_order) AS max_order, COUNT(DISTINCT ci.person_id) AS unique_actors FROM cast_info ci JOIN role_type rt ON ci.role_id = rt.id JOIN person_info pi ON ci.person_id = pi.person_id WHERE ci.person_role_id IS NOT NULL AND pi.info_type_id = 3 GROUP BY rt.ROLE ORDER BY total_roles DESC;
SELECT ct.kind AS company_type, AVG(t.production_year) AS average_production_year, COUNT(DISTINCT t.id) AS number_of_movies, SUM(CASE WHEN ak.season_nr IS NOT NULL THEN 1 ELSE 0 END) AS number_of_series_episodes, COUNT(DISTINCT mk.keyword_id) AS unique_keywords_used, COUNT(DISTINCT ml.linked_movie_id) AS number_of_linked_movies FROM title AS t LEFT JOIN aka_title AS ak ON t.id = ak.movie_id LEFT JOIN movie_companies AS mc ON t.id = mc.movie_id LEFT JOIN company_type AS ct ON mc.company_type_id = ct.id LEFT JOIN movie_keyword AS mk ON t.id = mk.movie_id LEFT JOIN movie_link AS ml ON t.id = ml.movie_id WHERE t.production_year BETWEEN 2000 AND 2010 AND mc.note LIKE '%(TV)%' AND (ak.season_nr IN ('13', '5', '19') OR ak.season_nr IS NULL) AND (ak.production_year = '2008' OR ak.production_year IS NULL) GROUP BY ct.kind ORDER BY average_production_year DESC, number_of_movies DESC;
SELECT ct.kind AS company_kind, rt.ROLE AS role_type, COUNT(DISTINCT ci.id) AS total_cast_members, AVG(ci.nr_order) AS average_cast_order, SUM(CASE WHEN mi_idx.info LIKE '....33.1.1' THEN 1 ELSE 0 END) AS count_specific_info_pattern, kind.kind AS movie_kind FROM cast_info AS ci JOIN role_type AS rt ON ci.role_id = rt.id JOIN movie_info_idx AS mi_idx ON ci.movie_id = mi_idx.movie_id JOIN kind_type AS kind ON kind.id = (SELECT movie_id FROM complete_cast WHERE movie_id = ci.movie_id LIMIT 1) JOIN movie_companies AS mc ON ci.movie_id = mc.movie_id JOIN company_type AS ct ON mc.company_type_id = ct.id WHERE ci.movie_id = 305396 AND ct.id IN (1, 2, 3, 4) AND rt.ROLE IN ('actor', 'actress', 'producer', 'director') AND (mi_idx.info LIKE '00.0011111' OR mi_idx.info LIKE '1.....21.4') GROUP BY ct.kind, rt.ROLE, kind.kind;
SELECT AVG(ak.production_year) AS average_production_year, COUNT(DISTINCT ak.id) AS total_alternate_titles, SUM(mc.company_type_id) AS total_company_types, COUNT(DISTINCT pi.person_id) AS total_persons_with_info, COUNT(DISTINCT kc.id) AS total_keywords_used, kt.LINK as link_type FROM aka_title ak JOIN movie_companies mc ON ak.movie_id = mc.movie_id JOIN person_info pi ON ak.movie_id = pi.person_id JOIN keyword kc ON ak.movie_id = kc.id JOIN link_type kt ON kt.id = mc.company_type_id WHERE ak.production_year > 2000 AND kt.LINK IN ('spoofs', 'remake of') AND mc.note IS NOT NULL AND pi.info_type_id BETWEEN 1 AND 5 GROUP BY kt.LINK ORDER BY average_production_year DESC;
SELECT AVG(mi.info::numeric) AS average_movie_length, COUNT(DISTINCT ci.person_id) AS unique_actors_count, COUNT(DISTINCT at.movie_id) AS total_alternate_titles, COUNT(DISTINCT ml.movie_id) AS movies_with_links, MAX(cn.name) AS company_with_latest_movie FROM movie_info mi JOIN aka_title at ON mi.movie_id = at.movie_id JOIN movie_link ml ON ml.movie_id = mi.movie_id JOIN cast_info ci ON ci.movie_id = mi.movie_id JOIN company_name cn ON cn.imdb_id = mi.movie_id WHERE mi.info_type_id = 1 AND ml.link_type_id IN (3, 4, 6, 10) AND ml.linked_movie_id IN (1131872, 5910, 2403234) GROUP BY mi.movie_id;
SELECT kt.kind AS movie_kind, COUNT(DISTINCT at.id) AS total_titles, COUNT(DISTINCT at.movie_id) AS unique_movies, AVG(at.production_year) AS avg_production_year, SUM(CASE WHEN lt.link = 'alternate language version of' THEN 1 ELSE 0 END) AS alt_lang_versions, SUM(CASE WHEN lt.link = 'version of' THEN 1 ELSE 0 END) AS versions, SUM(CASE WHEN lt.link = 'features' THEN 1 ELSE 0 END) AS features_count FROM aka_title at JOIN kind_type kt ON at.kind_id = kt.id JOIN movie_info_idx mii ON at.movie_id = mii.movie_id JOIN link_type lt ON mii.id = lt.id WHERE at.imdb_index = 'IV' AND at.episode_of_id IN ('11942', '6153', '1980', '7480', '8274') AND kt.kind IN ('tv series', 'video movie', 'video game', 'tv mini series') AND mii.info_type_id IN (SELECT id FROM info_type WHERE info LIKE '%0..11202%' OR info LIKE '.0..002212') GROUP BY kt.kind;
SELECT cn.name AS company_name, COUNT(mc.movie_id) AS number_of_movies, AVG(cast(mi_idx.info AS numeric)) AS average_movie_rating, SUM(CASE WHEN lt.LINK = 'distributor' THEN 1 ELSE 0 END) AS distribution_deals_count FROM movie_companies AS mc JOIN company_name AS cn ON mc.company_id = cn.id JOIN link_type AS lt ON mc.company_type_id = lt.id LEFT JOIN movie_info_idx AS mi_idx ON mc.movie_id = mi_idx.movie_id WHERE mc.company_id IN ('908', '1169', '855') AND mc.company_type_id = '1' AND cn.name IN ('StudioCanal', 'Dollhouse', 'Images Film Library', 'Creative Video Features', 'Afterschool Special', 'Star Creations International') GROUP BY cn.name ORDER BY number_of_movies DESC, average_movie_rating DESC;
SELECT k.keyword, ci.person_role_id, COUNT(DISTINCT ci.person_id) AS unique_person_count, COUNT(ci.movie_id) AS movie_count, AVG(ci.nr_order) AS average_cast_order FROM cast_info ci JOIN movie_keyword mk ON ci.movie_id = mk.movie_id JOIN keyword k ON mk.keyword_id = k.id WHERE k.phonetic_code IN ('V315', 'G2324') GROUP BY k.keyword, ci.person_role_id ORDER BY unique_person_count DESC, movie_count DESC;
