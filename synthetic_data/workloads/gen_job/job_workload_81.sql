SELECT ct.kind AS company_kind, kt.kind AS movie_kind, COUNT(DISTINCT ci.movie_id) AS num_movies, AVG(ci.nr_order) AS average_cast_order, SUM(CASE WHEN ci.person_role_id IS NOT NULL THEN 1 ELSE 0 END) AS num_roles_with_person_role_id, COUNT(DISTINCT ci.person_id) AS num_unique_actors FROM movie_companies mc JOIN company_type ct ON mc.company_type_id = ct.id JOIN kind_type kt ON kt.id = 1 JOIN cast_info ci ON mc.movie_id = ci.movie_id WHERE mc.company_type_id = 1 AND kt.kind IN ('episode', 'video movie') GROUP BY ct.kind, kt.kind;
SELECT kt.kind AS movie_kind, AVG(title.production_year) AS average_production_year, COUNT(DISTINCT cast_info.person_id) AS number_of_actors, COUNT(DISTINCT company_name.id) AS number_of_companies, SUM(case when cast_info.role_id = 1 then 1 else 0 end) AS number_of_lead_roles, MAX(movie_info.info) AS longest_movie_info FROM title JOIN kind_type AS kt ON title.kind_id = kt.id JOIN cast_info ON title.id = cast_info.movie_id JOIN movie_companies ON title.id = movie_companies.movie_id JOIN company_name ON movie_companies.company_id = company_name.id JOIN movie_info ON title.id = movie_info.movie_id WHERE title.production_year >= 2000 AND cast_info.role_id = 1 AND movie_companies.company_type_id IN (SELECT id FROM company_name WHERE country_code = 'US') GROUP BY kt.kind ORDER BY average_production_year DESC, number_of_actors DESC;
SELECT COUNT(DISTINCT n.id) AS total_names, AVG(n.imdb_id) AS average_imdb_id, SUM(CASE WHEN n.gender = 'F' THEN 1 ELSE 0 END) AS female_count, SUM(CASE WHEN n.gender = 'M' THEN 1 ELSE 0 END) AS male_count, mi.info_type_id, k.keyword, AVG(CAST(mi.info AS DOUBLE PRECISION)) FILTER (WHERE mi.info ~ '^\d+(\.\d+)?$') AS average_numeric_info FROM name n JOIN movie_info mi ON n.id = mi.movie_id JOIN keyword k ON k.id = mi.info_type_id WHERE n.name_pcode_nf IN ('H6142', 'K434', 'L4', 'B2415') GROUP BY mi.info_type_id, k.keyword ORDER BY total_names DESC, average_numeric_info DESC;
SELECT kt.kind AS movie_kind, AVG(t.production_year) AS average_production_year, COUNT(DISTINCT t.id) AS total_movies, COUNT(DISTINCT mi.info) AS unique_info_types, SUM(CASE WHEN t.season_nr IN ('8', '20', '12', '24', '33') THEN 1 ELSE 0 END) AS count_specific_seasons, COUNT(DISTINCT pi.person_id) AS total_persons_involved FROM title AS t JOIN kind_type AS kt ON t.kind_id = kt.id LEFT JOIN movie_info_idx AS mi ON t.id = mi.movie_id LEFT JOIN person_info AS pi ON pi.person_id = t.id GROUP BY kt.kind ORDER BY total_movies DESC;
SELECT AVG(t.production_year) AS average_production_year, COUNT(DISTINCT t.id) AS number_of_movies, cn.country_code, rt.ROLE, SUM(CASE WHEN t.kind_id = 1 THEN 1 ELSE 0 END) AS number_of_feature_films, SUM(CASE WHEN t.kind_id = 2 THEN 1 ELSE 0 END) AS number_of_short_films, COUNT(DISTINCT mc.company_id) AS number_of_companies_involved, COUNT(DISTINCT ml.link_type_id) AS number_of_unique_link_types FROM title AS t JOIN movie_companies AS mc ON t.id = mc.movie_id JOIN company_name AS cn ON mc.company_id = cn.id JOIN role_type AS rt ON mc.company_type_id = rt.id LEFT JOIN movie_link AS ml ON t.id = ml.movie_id WHERE t.production_year BETWEEN 1990 AND 2000 AND rt.id IN ('6', '8') AND mc.note LIKE '%(TV)%' GROUP BY cn.country_code, rt.ROLE ORDER BY average_production_year DESC, number_of_movies DESC;
SELECT n.gender, COUNT(DISTINCT n.id) AS number_of_people, AVG(mi_idx.info::numeric) AS average_movie_rating, SUM(CASE WHEN lt.LINK = 'sequel' THEN 1 ELSE 0 END) AS count_sequel_links, COUNT(DISTINCT k.id) AS number_of_keywords, COUNT(DISTINCT an.id) AS number_of_aka_names FROM name AS n LEFT JOIN aka_name AS an ON n.id = an.person_id LEFT JOIN movie_link AS ml ON ml.movie_id IN (SELECT movie_id FROM movie_info_idx WHERE id IN (1031, 375, 3321, 4177, 537)) LEFT JOIN link_type AS lt ON ml.link_type_id = lt.id LEFT JOIN movie_info_idx AS mi_idx ON ml.movie_id = mi_idx.movie_id AND mi_idx.info_type_id = 101 LEFT JOIN movie_keyword AS mk ON ml.movie_id = mk.movie_id LEFT JOIN keyword AS k ON mk.keyword_id = k.id GROUP BY n.gender HAVING COUNT(DISTINCT k.id) > 5 ORDER BY average_movie_rating DESC;
