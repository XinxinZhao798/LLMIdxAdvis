SELECT p.p_promo_name, p.p_purpose, COUNT(DISTINCT ss.ss_ticket_number) AS num_sales, SUM(ss.ss_quantity) AS total_quantity_sold, AVG(ss.ss_sales_price) AS avg_sale_price, SUM(ss.ss_net_profit) AS total_net_profit, COUNT(DISTINCT sr.sr_ticket_number) AS num_returns, SUM(sr.sr_return_quantity) AS total_quantity_returned, AVG(sr.sr_return_amt) AS avg_return_amount, SUM(sr.sr_net_loss) AS total_net_loss, (SUM(ss.ss_net_profit) - SUM(sr.sr_net_loss)) AS net_effect_of_promotions FROM promotion p LEFT JOIN store_sales ss ON p.p_promo_sk = ss.ss_promo_sk LEFT JOIN store_returns sr ON ss.ss_ticket_number = sr.sr_ticket_number WHERE p.p_cost::decimal > 500.00 AND p.p_purpose <> 'Unknown' AND ss.ss_sold_date_sk IS NOT NULL AND sr.sr_returned_date_sk IS NOT NULL GROUP BY p.p_promo_name, p.p_purpose ORDER BY net_effect_of_promotions DESC;
SELECT dd.d_year AS fiscal_year, dd.d_quarter_name AS quarter, COUNT(DISTINCT ws.web_site_sk) AS number_of_websites, SUM(w.w_warehouse_sq_ft) AS total_warehouse_sq_ft, AVG(hd.hd_dep_count) AS avg_dependency_count, AVG(hd.hd_vehicle_count) AS avg_vehicle_count, SUM(CASE WHEN hd.hd_buy_potential = '>10000' THEN 1 ELSE 0 END) AS high_buy_potential_count, AVG(ws.web_tax_percentage) AS avg_web_tax_percentage FROM date_dim dd JOIN web_site ws ON dd.d_date_sk = ws.web_open_date_sk OR dd.d_date_sk = ws.web_close_date_sk JOIN warehouse w ON ws.web_zip = w.w_zip JOIN household_demographics hd ON hd.hd_income_band_sk IS NOT NULL WHERE dd.d_fy_year IN (1913, 1900, 1909, 1901, 1902) AND dd.d_weekend = 'N' AND hd.hd_dep_count IN (3, 9, 4, 5, 2, 0) AND hd.hd_buy_potential IN ('5001-10000', '1001-5000', '>10000', 'Unknown', '0-500', '501-1000') AND w.w_warehouse_sq_ft IN (977787, 294242, 621234, 138504) AND ws.web_street_type IN ('ST', 'Drive', 'Wy') GROUP BY fiscal_year, quarter ORDER BY fiscal_year, quarter;
SELECT s_state, COUNT(DISTINCT ss_customer_sk) as total_customers, SUM(ss_quantity) as total_quantity_sold, AVG(ss_sales_price) as average_sales_price, SUM(ss_net_profit) as total_net_profit, SUM(cr_return_amount) as total_return_amount, AVG(hd_dep_count) as average_dependent_count FROM store_sales JOIN store ON ss_store_sk = s_store_sk JOIN catalog_returns ON ss_item_sk = cr_item_sk AND ss_ticket_number = cr_order_number JOIN household_demographics ON ss_hdemo_sk = hd_demo_sk GROUP BY s_state ORDER BY total_net_profit DESC LIMIT 10;
SELECT cc.cc_call_center_id, cc.cc_name, cc.cc_city, cc.cc_state, SUM(cs.cs_net_paid) AS total_sales, AVG(cs.cs_ext_discount_amt) AS average_discount, COUNT(cs.cs_order_number) AS number_of_orders, SUM(inv.inv_quantity_on_hand) AS total_inventory, COUNT(DISTINCT p.p_promo_id) AS number_of_promotions_used FROM call_center cc LEFT JOIN catalog_sales cs ON cc.cc_call_center_sk = cs.cs_call_center_sk LEFT JOIN promotion p ON cs.cs_promo_sk = p.p_promo_sk LEFT JOIN inventory inv ON cs.cs_item_sk = inv.inv_item_sk AND cc.cc_division = inv.inv_warehouse_sk WHERE cs.cs_sold_date_sk IN ('2450823', '2450816', '2450827', '2450829', '2450820') AND cs.cs_promo_sk IN ('130', '96', '160', '128') GROUP BY cc.cc_call_center_id, cc.cc_name, cc.cc_city, cc.cc_state ORDER BY total_sales DESC;
SELECT c.cc_name, c.cc_city, c.cc_state, cp.cp_department, p.p_promo_name, t.t_shift, SUM(cs.cs_quantity) AS total_quantity_sold, AVG(cs.cs_sales_price) AS average_sales_price, COUNT(DISTINCT cs.cs_order_number) AS number_of_orders, SUM(cs.cs_net_profit) AS total_net_profit FROM catalog_sales cs JOIN call_center c ON cs.cs_call_center_sk = c.cc_call_center_sk JOIN catalog_page cp ON cs.cs_catalog_page_sk = cp.cp_catalog_page_sk JOIN promotion p ON cs.cs_promo_sk = p.p_promo_sk JOIN time_dim t ON cs.cs_sold_time_sk = t.t_time_sk WHERE c.cc_rec_start_date <= CURRENT_DATE AND (c.cc_rec_end_date IS NULL OR c.cc_rec_end_date > CURRENT_DATE) AND cp.cp_start_date_sk <= cs.cs_sold_date_sk AND (cp.cp_end_date_sk IS NULL OR cp.cp_end_date_sk >= cs.cs_sold_date_sk) AND p.p_discount_active = 'Y' GROUP BY c.cc_name, c.cc_city, c.cc_state, cp.cp_department, p.p_promo_name, t.t_shift ORDER BY total_net_profit DESC, total_quantity_sold DESC LIMIT 100;
